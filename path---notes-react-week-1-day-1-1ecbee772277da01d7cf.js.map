{"version":3,"sources":["webpack:///path---notes-react-week-1-day-1-1ecbee772277da01d7cf.js","webpack:///./.cache/json/notes-react-week-1-day-1.json"],"names":["webpackJsonp","336","module","exports","data","markdownRemark","html","frontmatter","title","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,g1PAAkiPC,aAAiWC,MAAA,6DAAAC,KAAA,kBAA6FC,aAAgBC,KAAA","file":"path---notes-react-week-1-day-1-1ecbee772277da01d7cf.js","sourcesContent":["webpackJsonp([200571381717156],{\n\n/***/ 336:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>React is a UI library that is used in various forms to create complex, rich user interfaces. It powers user experiences in a way that is decoupled and unconcerned when and where the data is received.</p>\\n<!-- end -->\\n<p>Objectives:</p>\\n<ul>\\n<li>use an html file set up a react environment and mount an application to a target DOM element using React and ReactDOM.render</li>\\n<li>use JSX to mount a DOM element and display that element in a web browser</li>\\n<li>implement a functional component to render a piece of UI to the screen</li>\\n</ul>\\n<h2>Setting up a React environment using a single HTML file</h2>\\n<p>React takes what we have written, and passes it to this function called <code>React.createElement()</code> which turns our code into DOM elements with all of their appropriate handlers, styles and attributes laid out.</p>\\n<p>What we get with react is this idea of <code>composability</code> because all we have to do is think about React elements as smaller pieces of UI, and build out those small pieces of UI in these code blocks we call <code>components</code>.</p>\\n<p>Everything you do in react will done through this <code>createElement()</code> method however, as you’ll see in the coming material,this has now been abstracted away from us and we now have the ability to use this new technology called <code>JSX</code> to write out our react elements.</p>\\n<ol>\\n<li>Create an <code>index.html</code> file with the following scaffolding</li>\\n</ol>\\n<pre><code>&#x3C;!DOCTYPE html>\\n&#x3C;html lang=\\\"en\\\">\\n\\n&#x3C;head>\\n  &#x3C;title>Hello World React&#x3C;/title>\\n&#x3C;/head>\\n\\n&#x3C;body>\\n  &#x3C;div id=\\\"target\\\">&#x3C;/div>\\n&#x3C;/body>\\n\\n&#x3C;script>\\n  // Our app goes in between these script tags\\n&#x3C;/script>\\n\\n&#x3C;/html>\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Just before the script tags, add in our packages that we need</li>\\n</ol>\\n<pre><code>&#x3C;script crossorigin src=\\\"https://unpkg.com/react@16/umd/react.development.js\\\">&#x3C;/script>\\n&#x3C;script crossorigin src=\\\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\\\">&#x3C;/script>\\n\\n&#x3C;script>\\n  // Our app goes in between these script tags\\n&#x3C;/script>\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>Create a DOM element using <code>React.createElement()</code> and make an <code>h1</code> element with a <code>class=\\\"heading\\\"</code> and some child text <code>Hello world</code> </li>\\n</ol>\\n<pre><code>&#x3C;script>\\nconst myElement = React.createElement('h1', {className:'heading'}, 'Hello World');\\n&#x3C;/script>\\n</code></pre>\\n<ol start=\\\"4\\\">\\n<li>Use the <code>ReactDOM</code> library to target where our application will live, and inject our newly created <code>myElement</code> element using the <code>.render</code> method</li>\\n</ol>\\n<pre><code>&#x3C;script>\\nconst myElement = React.createElement('h1', {className:'heading'}, 'Hello World');\\nReactDOM.render(myElement, document.getElementById('target'));\\n&#x3C;/script>\\n</code></pre>\\n<p>Notice we are passing our <code>myElement</code> as the first argument to render and we’re selecting our <code>&#x3C;div id=\\\"target\\\">&#x3C;/div></code>. For every single react application you’ll ONLY DO THIS ONE TIME for a single application. Everything else well be built out as a child of this.</p>\\n<h3>Challenge</h3>\\n<p>Steps to complete this assignment</p>\\n<ul>\\n<li>create an <code>index.html</code> file</li>\\n<li>scaffold out a regular html page and add a <code>&#x3C;div id=\\\"target\\\">&#x3C;/div></code> as the container for your application to live.</li>\\n<li>pull in the React and ReactDOM packages via CDN/UNPKG</li>\\n<li>create a script tag and add the attribute <code>type = “text/javascript”</code> so that you can write your react application inline</li>\\n<li>inside your script tag, create your myElement variable and set it equal to the React.createElement() function: <code>const myElement = React.createElement()</code></li>\\n<li>Decide what type of element you want rendered to the screen, and what attributes (should have at least 1 className) you want on your element and what children text you’d like your element to display. Pass multiple strings to as children and see what happens.</li>\\n<li>finally, mount your element to your wrapper div using <code>ReactDOM.render</code></li>\\n</ul>\\n<h2>Using JSX to mount a DOM element and display it in a web browser</h2>\\n<p>We actually could build out an application using solely the <code>createElement</code> method, but eventually it’ll get really complex, and hard to reason about, as our application scales. This is why React gave us an abstraction on top of this method, called <code>JSX</code>.</p>\\n<p><a href=\\\"https://reactjs.org/docs/introducing-jsx.html#jsx-represents-objects\\\" title=\\\"ReactJS docs: JSX represents objects\\\">React takes your JSX and boils it down through React.createElement() calls</a> that is why it’s important to understand a little bit about this particular method.</p>\\n<ol>\\n<li>Use something like <code>Babel</code> transpile your JSX into a regular version of JavaScript so that Chrome can read it. To get <code>babel-standalone</code> included into our html file for now, we can simply use the <code>UNPKG</code> cdn to retrieve it.</li>\\n</ol>\\n<pre><code>&#x3C;script crossorigin src=\\\"https://unpkg.com/babel-standalone@6.26.0/babel.js\\\">&#x3C;/script>\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Refactor our <code>myElement</code> variable to use <code>JSX</code> instead of <code>React.createElement()</code></li>\\n</ol>\\n<pre><code>const myElement = React.createElement('h1', {className:'heading'}, 'Hello World');\\n\\n// becomes\\n\\nconst myElement = &#x3C;h1 className=\\\"heading\\\" >Hello World&#x3C;/h1>;\\n</code></pre>\\n<h3>Challenge</h3>\\n<p>From scratch, build out a React application within an HTML file that will mount an header with your name, age and location. Use a <code>&#x3C;style></code> tag to add some CSS and make your profile you just built look nice and pretty.</p>\\n<h2>Implementing a functional component to render a piece of UI to the screen</h2>\\n<p>Everything we’ll do in React will revolve around components. There are different types of components that we can use, and we’re going to start with the simplest type, the <code>Functional Component</code>. Simply put, we can use basic functions as components. These functions will simply return out some sort of JSX. Which will then be rendered out to the Browser.</p>\\n<p>Our most basic of components looks like this. It looks exactly like an anonymous arrow function that we’ve named BasicComponent. In fact, that is literally what this is.</p>\\n<pre><code>const BasicComponent = () => &#x3C;h1>Hello World&#x3C;/h1>;\\n</code></pre>\\n<ol>\\n<li>Create a wrapper element <code>App</code> and pass it in to <code>ReactDOM.render</code></li>\\n</ol>\\n<pre><code>const App = () => (\\n  &#x3C;div>\\n   // Our components go in between these parent div tags\\n  &#x3C;/div>\\n);\\n\\nReactDOM.render(&#x3C;App />, document.getElementById(\\\"root\\\"));\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Build out some reusable functional components</li>\\n</ol>\\n<pre><code>const Header = () => {\\n  return &#x3C;h1>Hello From React&#x3C;/h1>;\\n};\\n\\nconst BasicInput = () => {\\n  return &#x3C;input type=\\\"text\\\" placeholder=\\\"Change the world, one input at a time\\\" />;\\n};\\n\\nconst BasicButton = () => {\\n  return &#x3C;button>Click me I'm a button!&#x3C;/button>;\\n};\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>Pass the components into our wrapper <code>&#x3C;App/></code> component and Capitalize the Components</li>\\n</ol>\\n<pre><code>const App = () => (\\n  &#x3C;div>\\n    &#x3C;Header />\\n    &#x3C;BasicInput />\\n    &#x3C;BasicButton />\\n  &#x3C;/div>\\n);\\n</code></pre>\\n<h3>Challenge</h3>\\n<p>Build out a few pieces of composed components from scratch.</p>\\n<p>This is a <a href=\\\"https://devhints.io/react\\\" title=\\\"by DEVHINTS.IO\\\">React Cheat Sheet</a> and below is another</p>\\n<p><img src=\\\"https://ibin.co/4BGcJlgplMcW.png\\\" alt=\\\"React Cheat Sheet\\\" title=\\\"React Cheat Sheet\\\"></p>\",\"frontmatter\":{\"title\":\"How it works: React Week 1 Day 1 - Functional components I\",\"date\":\"June 11 2018\"}}},\"pathContext\":{\"slug\":\"/notes/react-week-1-day-1/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---notes-react-week-1-day-1-1ecbee772277da01d7cf.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>React is a UI library that is used in various forms to create complex, rich user interfaces. It powers user experiences in a way that is decoupled and unconcerned when and where the data is received.</p>\\n<!-- end -->\\n<p>Objectives:</p>\\n<ul>\\n<li>use an html file set up a react environment and mount an application to a target DOM element using React and ReactDOM.render</li>\\n<li>use JSX to mount a DOM element and display that element in a web browser</li>\\n<li>implement a functional component to render a piece of UI to the screen</li>\\n</ul>\\n<h2>Setting up a React environment using a single HTML file</h2>\\n<p>React takes what we have written, and passes it to this function called <code>React.createElement()</code> which turns our code into DOM elements with all of their appropriate handlers, styles and attributes laid out.</p>\\n<p>What we get with react is this idea of <code>composability</code> because all we have to do is think about React elements as smaller pieces of UI, and build out those small pieces of UI in these code blocks we call <code>components</code>.</p>\\n<p>Everything you do in react will done through this <code>createElement()</code> method however, as you’ll see in the coming material,this has now been abstracted away from us and we now have the ability to use this new technology called <code>JSX</code> to write out our react elements.</p>\\n<ol>\\n<li>Create an <code>index.html</code> file with the following scaffolding</li>\\n</ol>\\n<pre><code>&#x3C;!DOCTYPE html>\\n&#x3C;html lang=\\\"en\\\">\\n\\n&#x3C;head>\\n  &#x3C;title>Hello World React&#x3C;/title>\\n&#x3C;/head>\\n\\n&#x3C;body>\\n  &#x3C;div id=\\\"target\\\">&#x3C;/div>\\n&#x3C;/body>\\n\\n&#x3C;script>\\n  // Our app goes in between these script tags\\n&#x3C;/script>\\n\\n&#x3C;/html>\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Just before the script tags, add in our packages that we need</li>\\n</ol>\\n<pre><code>&#x3C;script crossorigin src=\\\"https://unpkg.com/react@16/umd/react.development.js\\\">&#x3C;/script>\\n&#x3C;script crossorigin src=\\\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\\\">&#x3C;/script>\\n\\n&#x3C;script>\\n  // Our app goes in between these script tags\\n&#x3C;/script>\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>Create a DOM element using <code>React.createElement()</code> and make an <code>h1</code> element with a <code>class=\\\"heading\\\"</code> and some child text <code>Hello world</code> </li>\\n</ol>\\n<pre><code>&#x3C;script>\\nconst myElement = React.createElement('h1', {className:'heading'}, 'Hello World');\\n&#x3C;/script>\\n</code></pre>\\n<ol start=\\\"4\\\">\\n<li>Use the <code>ReactDOM</code> library to target where our application will live, and inject our newly created <code>myElement</code> element using the <code>.render</code> method</li>\\n</ol>\\n<pre><code>&#x3C;script>\\nconst myElement = React.createElement('h1', {className:'heading'}, 'Hello World');\\nReactDOM.render(myElement, document.getElementById('target'));\\n&#x3C;/script>\\n</code></pre>\\n<p>Notice we are passing our <code>myElement</code> as the first argument to render and we’re selecting our <code>&#x3C;div id=\\\"target\\\">&#x3C;/div></code>. For every single react application you’ll ONLY DO THIS ONE TIME for a single application. Everything else well be built out as a child of this.</p>\\n<h3>Challenge</h3>\\n<p>Steps to complete this assignment</p>\\n<ul>\\n<li>create an <code>index.html</code> file</li>\\n<li>scaffold out a regular html page and add a <code>&#x3C;div id=\\\"target\\\">&#x3C;/div></code> as the container for your application to live.</li>\\n<li>pull in the React and ReactDOM packages via CDN/UNPKG</li>\\n<li>create a script tag and add the attribute <code>type = “text/javascript”</code> so that you can write your react application inline</li>\\n<li>inside your script tag, create your myElement variable and set it equal to the React.createElement() function: <code>const myElement = React.createElement()</code></li>\\n<li>Decide what type of element you want rendered to the screen, and what attributes (should have at least 1 className) you want on your element and what children text you’d like your element to display. Pass multiple strings to as children and see what happens.</li>\\n<li>finally, mount your element to your wrapper div using <code>ReactDOM.render</code></li>\\n</ul>\\n<h2>Using JSX to mount a DOM element and display it in a web browser</h2>\\n<p>We actually could build out an application using solely the <code>createElement</code> method, but eventually it’ll get really complex, and hard to reason about, as our application scales. This is why React gave us an abstraction on top of this method, called <code>JSX</code>.</p>\\n<p><a href=\\\"https://reactjs.org/docs/introducing-jsx.html#jsx-represents-objects\\\" title=\\\"ReactJS docs: JSX represents objects\\\">React takes your JSX and boils it down through React.createElement() calls</a> that is why it’s important to understand a little bit about this particular method.</p>\\n<ol>\\n<li>Use something like <code>Babel</code> transpile your JSX into a regular version of JavaScript so that Chrome can read it. To get <code>babel-standalone</code> included into our html file for now, we can simply use the <code>UNPKG</code> cdn to retrieve it.</li>\\n</ol>\\n<pre><code>&#x3C;script crossorigin src=\\\"https://unpkg.com/babel-standalone@6.26.0/babel.js\\\">&#x3C;/script>\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Refactor our <code>myElement</code> variable to use <code>JSX</code> instead of <code>React.createElement()</code></li>\\n</ol>\\n<pre><code>const myElement = React.createElement('h1', {className:'heading'}, 'Hello World');\\n\\n// becomes\\n\\nconst myElement = &#x3C;h1 className=\\\"heading\\\" >Hello World&#x3C;/h1>;\\n</code></pre>\\n<h3>Challenge</h3>\\n<p>From scratch, build out a React application within an HTML file that will mount an header with your name, age and location. Use a <code>&#x3C;style></code> tag to add some CSS and make your profile you just built look nice and pretty.</p>\\n<h2>Implementing a functional component to render a piece of UI to the screen</h2>\\n<p>Everything we’ll do in React will revolve around components. There are different types of components that we can use, and we’re going to start with the simplest type, the <code>Functional Component</code>. Simply put, we can use basic functions as components. These functions will simply return out some sort of JSX. Which will then be rendered out to the Browser.</p>\\n<p>Our most basic of components looks like this. It looks exactly like an anonymous arrow function that we’ve named BasicComponent. In fact, that is literally what this is.</p>\\n<pre><code>const BasicComponent = () => &#x3C;h1>Hello World&#x3C;/h1>;\\n</code></pre>\\n<ol>\\n<li>Create a wrapper element <code>App</code> and pass it in to <code>ReactDOM.render</code></li>\\n</ol>\\n<pre><code>const App = () => (\\n  &#x3C;div>\\n   // Our components go in between these parent div tags\\n  &#x3C;/div>\\n);\\n\\nReactDOM.render(&#x3C;App />, document.getElementById(\\\"root\\\"));\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>Build out some reusable functional components</li>\\n</ol>\\n<pre><code>const Header = () => {\\n  return &#x3C;h1>Hello From React&#x3C;/h1>;\\n};\\n\\nconst BasicInput = () => {\\n  return &#x3C;input type=\\\"text\\\" placeholder=\\\"Change the world, one input at a time\\\" />;\\n};\\n\\nconst BasicButton = () => {\\n  return &#x3C;button>Click me I'm a button!&#x3C;/button>;\\n};\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>Pass the components into our wrapper <code>&#x3C;App/></code> component and Capitalize the Components</li>\\n</ol>\\n<pre><code>const App = () => (\\n  &#x3C;div>\\n    &#x3C;Header />\\n    &#x3C;BasicInput />\\n    &#x3C;BasicButton />\\n  &#x3C;/div>\\n);\\n</code></pre>\\n<h3>Challenge</h3>\\n<p>Build out a few pieces of composed components from scratch.</p>\\n<p>This is a <a href=\\\"https://devhints.io/react\\\" title=\\\"by DEVHINTS.IO\\\">React Cheat Sheet</a> and below is another</p>\\n<p><img src=\\\"https://ibin.co/4BGcJlgplMcW.png\\\" alt=\\\"React Cheat Sheet\\\" title=\\\"React Cheat Sheet\\\"></p>\",\"frontmatter\":{\"title\":\"How it works: React Week 1 Day 1 - Functional components I\",\"date\":\"June 11 2018\"}}},\"pathContext\":{\"slug\":\"/notes/react-week-1-day-1/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/notes-react-week-1-day-1.json\n// module id = 336\n// module chunks = 200571381717156"],"sourceRoot":""}